{"version":3,"sources":["GlobalStyle.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","routes.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/FetchExampleTasksButton/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","MainForm","styled","form","breakpoint","mobileMax","Button","button","teal","white","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","loading","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","Input","input","alto","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","className","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","StyledLink","Link","black","searchQueryParamName","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","ButtonsDiv","div","silver","Buttons","areTasksEmpty","isEveryTaskDone","disabled","MainSection","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","MainContainer","main","Container","children","Wrapper","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","FetchExampleTasksButton","TasksPage","TaskPage","useParams","find","getTaskById","AuthorPage","StyledNavLink","NavLink","Navigation","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dcfd1f9.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const MainForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active{\r\n        filter: brightness(120%);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n         },\r\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\n\r\nexport default tasksSlice.reducer;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nconst Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport default Input;","import { useState, useRef } from \"react\";\r\nimport { MainForm, Button } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if(!trimmedNewTaskContent){\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        \r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    }\r\n    \r\n    return (\r\n        <MainForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"What should I do?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button className=\"form__button\">Add task</Button>\r\n        </MainForm>\r\n    )\r\n}\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n    display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen};        \r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active{\r\n        filter: brightness(120%);\r\n    }      \r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.color.black};\r\n\r\n    &:hover{\r\n        color: ${({ theme }) => theme.color.teal};\r\n    }\r\n`;","const searchQueryParamName = \"search\";\r\n\r\nexport default searchQueryParamName;","export const toTasks = () => \"/tasks\";\r\nexport const toAuthor = () => \"/author\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/tasks/${id}`;","import { useHistory, useLocation } from \"react-router\";\r\n\r\nexport const useQueryParameter = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    }\r\n}","import { List, Item, Content, Button, StyledLink } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectHideDone, toggleTaskDone, removeTask, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\n\r\nconst TaskList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={toTask({ id: task.id })}>{task.content}</StyledLink>\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        ✘ </Button>\r\n                </Item>\r\n            ))}\r\n        </List >\r\n    );\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsDiv = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:disabled{\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import { ButtonsDiv } from \"./styled\";\r\nimport { Button } from \"../Button\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    selectAreTasksEmpty,\r\n    selectHideDone,\r\n    selectIsEveryTaskDone,\r\n    toggleHideDone,\r\n    setAllDone,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsDiv>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Show\" : \"Hide\"} done\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Complete all\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsDiv>\r\n    )\r\n};\r\n\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const MainSection = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { MainSection, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <MainSection>\r\n    <Header>\r\n      <Title>\r\n        {title}\r\n      </Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>\r\n      {body}\r\n    </Body>\r\n  </MainSection>\r\n)\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const MainContainer = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { MainContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <MainContainer>\r\n        {children}\r\n    </MainContainer>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import Input from \"../../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filter tasks\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Search;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\nimport { Button } from \"../Button\";\r\n\r\nconst FetchExampleTasksButton = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n    return (\r\n        <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\r\n            {\r\n                loading\r\n                    ? \"Loading...\"\r\n                    : \"Download sample tasks\"\r\n            }\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default FetchExampleTasksButton;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport Search from \"./Search\";\nimport FetchExampleTasksButton from \"./FetchExampleTasksButton\";\n\nfunction TasksPage() {\n  return (\n    <Container>\n      <Header title=\"TO DO LIST\" />\n      <Section\n        title=\"Add new task...\"\n        body={<Form />}\n        extraHeaderContent={<FetchExampleTasksButton />}\n      />\n\n      <Section\n        title=\"Search\"\n        body={<Search />}\n      />\n\n      <Section\n        title=\"To do list\"\n        body={<TaskList />}\n        extraHeaderContent={<Buttons />}\n      />\n\n    </Container>\n\n  );\n}\n\nexport default TasksPage;\n","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n    return (\r\n        <Container>\r\n            <Header title=\"TASK DETAILS\" />\r\n            <Section\r\n                title={task ? task.content : \"Task not found\"}\r\n                body={!!task && (\r\n                    <>\r\n                        <strong>Done:</strong> {task.done ? \"Yes\" : \"No\"}\r\n                    </>\r\n                )}\r\n            />\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\nexport default TaskPage;\r\n","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nconst AuthorPage = () => (\r\n    <Container>\r\n        <Header title=\"ABOUT AUTHOR\" />\r\n        <Section\r\n            title=\"Magdalena Czuma\"\r\n            body={\r\n                <>\r\n                    here will be info about the author soon...\r\n                </>\r\n            }\r\n        />\r\n    </Container>\r\n)\r\n\r\nexport default AuthorPage;","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const StyledNavLink = styled(NavLink)`\r\n    color: ${({ theme }) => theme.color.white};\r\n    text-decoration: none;\r\n\r\n    &.active {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    background: ${({ theme }) => theme.color.teal};\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    margin: 20px;\r\n`;","import { toAuthor, toTasks } from \"../routes\";\r\nimport { List, Item, StyledNavLink } from \"./styled\";\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav>\r\n            <List>\r\n                <Item>\r\n                    <StyledNavLink to={toTasks()}>Tasks</StyledNavLink>\r\n                </Item>\r\n                <Item>\r\n                    <StyledNavLink to={toAuthor()}>About author</StyledNavLink>\r\n                </Item>\r\n            </List>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst App = () => (\r\n    <HashRouter>\r\n        <Navigation />\r\n\r\n        <Switch>\r\n            <Route path={toTask()}>\r\n                <TaskPage />\r\n            </Route>\r\n            <Route path={toTasks()}>\r\n                <TasksPage />\r\n            </Route>\r\n            <Route path={toAuthor()}>\r\n                <AuthorPage />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Redirect to={toTasks()} />\r\n            </Route>\r\n        </Switch>\r\n\r\n    </HashRouter>\r\n);\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, put, takeEvery, select, delay } from \"redux-saga/effects\"\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, selectTasks, fetchExampleTasksSuccess, fetchExampleTasksError } from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Something goes wrong!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n}"],"sourceRoot":""}