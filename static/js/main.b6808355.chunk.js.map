{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","value","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6808355.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if(!trimmedNewTaskContent){\r\n            return;\r\n        }\r\n        \r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n    }\r\n    \r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                className=\"form__input\"\r\n                placeholder=\"What should I do?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"form__button\">Add task</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"tasks\">\r\n        {tasks.map(task => (\r\n            <li\r\n                key={task.id}\r\n                className={`tasks__item${task.done && hideDone ? \" tasks__item--hidden\" : \"\"}`}\r\n            >\r\n                <button\r\n                    className=\"tasks__button tasks__button--toggleDone\"\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </button>\r\n                <span className={`tasks__content${task.done ? \"tasks__content--done\" : \"\"}`}>{task.content} </span>\r\n                <button\r\n                    className=\"tasks__button tasks__button--remove\"\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    ✘ </button>\r\n            </li>\r\n        ))}\r\n    </ul >\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button onClick={toggleHideDone} className=\"buttons__button\">\r\n                    {hideDone ? \"Show\" : \"Hide\"} done\r\n                </button>\r\n                <button\r\n                    onClick={setAllDone}\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Complete all\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n)\r\n\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n          <h2 className=\"section__title\">{title}</h2>\r\n          {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n          {body}\r\n        </div>\r\n      </section>\r\n)\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useEffect, useState } from \"react\";\n\nconst getInitialTasks = () => {\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\n\n  return tasksFromLocalStorage\n    ? JSON.parse(tasksFromLocalStorage)\n    : []\n}\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(getInitialTasks);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  }\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  }\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  }\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ])\n  };\n\n  return (\n    <Container>\n      <Header title=\"TO DO LIST\" />\n      <Section\n        title=\"Add new task...\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title=\"To do list\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />}\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n      />\n\n    </Container>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}