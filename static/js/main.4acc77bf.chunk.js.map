{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","useTasks.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","MainForm","styled","form","breakpoint","mobileMax","Input","input","alto","Button","button","teal","white","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","current","focus","ref","value","placeholder","onChange","target","className","List","ul","Item","li","hidden","css","Content","span","done","toggleDone","forestGreen","remove","crimson","TaskList","tasks","hideDone","removeTask","toggleTaskDone","map","task","onClick","id","content","ButtonsDiv","div","silver","Buttons","toggleHideDone","setAllDone","length","disabled","every","MainSection","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","MainContainer","main","Container","children","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","Tasks","setHideDone","setTasks","useEffect","setItem","stringify","filter","useTasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","black","document","getElementById"],"mappings":"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","file":"static/js/main.4acc77bf.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const MainForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active{\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { useState, useRef } from \"react\";\r\nimport { MainForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if(!trimmedNewTaskContent){\r\n            return;\r\n        }\r\n        \r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    }\r\n    \r\n    return (\r\n        <MainForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"What should I do?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button className=\"form__button\">Add task</Button>\r\n        </MainForm>\r\n    )\r\n}\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n    display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.forestGreen};        \r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.crimson};\r\n    `}\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active{\r\n        filter: brightness(120%);\r\n    }      \r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TaskList = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n            >\r\n                <Button\r\n                    toggleDone\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}>\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    ✘ </Button>\r\n            </Item>\r\n        ))}\r\n    </List >\r\n);\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsDiv = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:disabled{\r\n        color: ${({ theme }) => theme.color.silver};\r\n    }\r\n`;","import { ButtonsDiv, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <ButtonsDiv>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button onClick={toggleHideDone}>\r\n                    {hideDone ? \"Show\" : \"Hide\"} done\r\n                </Button>\r\n                <Button\r\n                    onClick={setAllDone}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Complete all\r\n                </Button>\r\n            </>\r\n        )}\r\n    </ButtonsDiv>\r\n)\r\n\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const MainSection = styled.section`\r\n    margin: 10px 0;\r\n    background: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { MainSection, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <MainSection>\r\n    <Header>\r\n      <Title>\r\n        {title}\r\n      </Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>\r\n      {body}\r\n    </Body>\r\n  </MainSection>\r\n)\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const MainContainer = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { MainContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <MainContainer>\r\n        {children}\r\n    </MainContainer>\r\n);\r\n\r\nexport default Container;","import { useEffect, useState } from \"react\";\r\n\r\nconst getInitialTasks = () => {\r\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n    return tasksFromLocalStorage\r\n        ? JSON.parse(tasksFromLocalStorage)\r\n        : [];\r\n};\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    }\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n            return task;\r\n        }));\r\n    }\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ])\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    }\r\n};\r\n","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\nimport { useState } from \"react\";\nimport { useTasks } from \"../../useTasks\";\n\nfunction Tasks() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n  } = useTasks();\n\n  return (\n    <Container>\n      <Header title=\"TO DO LIST\" />\n      <Section\n        title=\"Add new task...\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title=\"To do list\"\n        body={\n          <TaskList\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />}\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n      />\n\n    </Container>\n\n  );\n}\n\nexport default Tasks;\n","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n}"],"sourceRoot":""}